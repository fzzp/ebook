// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package dbrepo

import (
	"context"
	"database/sql"
)

const CreateSession = `-- name: CreateSession :execresult
INSERT INTO sessions SET user_id=?, token_hash=?
`

type CreateSessionParams struct {
	UserID    uint64 `json:"user_id"`
	TokenHash string `json:"token_hash"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, CreateSession, arg.UserID, arg.TokenHash)
}

const GetUserByToken = `-- name: GetUserByToken :one
SELECT u.id, u.email, u.password_hash, u.username, u.avatar, u.role, u.created_at, u.updated_at FROM users u JOIN sessions s on u.id = s.user_id WHERE s.token_hash = ?
`

func (q *Queries) GetUserByToken(ctx context.Context, tokenHash string) (*User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByToken, tokenHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Username,
		&i.Avatar,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
