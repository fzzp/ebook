// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book.sql

package dbrepo

import (
	"context"
	"database/sql"
	"time"
)

const CreateBook = `-- name: CreateBook :execresult
INSERT INTO books 
SET 
    book_title=?,
    book_isbn=?,
    book_cover=?,
    book_author=?,
    book_price=?,
    book_inventory=?,
    ebook_price=?,
    publish_at=?
`

type CreateBookParams struct {
	BookTitle     string    `json:"book_title"`
	BookIsbn      string    `json:"book_isbn"`
	BookCover     string    `json:"book_cover"`
	BookAuthor    string    `json:"book_author"`
	BookPrice     uint32    `json:"book_price"`
	BookInventory uint32    `json:"book_inventory"`
	EbookPrice    uint32    `json:"ebook_price"`
	PublishAt     time.Time `json:"publish_at"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, CreateBook,
		arg.BookTitle,
		arg.BookIsbn,
		arg.BookCover,
		arg.BookAuthor,
		arg.BookPrice,
		arg.BookInventory,
		arg.EbookPrice,
		arg.PublishAt,
	)
}

const GetBookByID = `-- name: GetBookByID :one
SELECT id, book_title, book_isbn, book_cover, book_author, book_price, book_inventory, ebook_price, publish_at, version, created_at, updated_at FROM books WHERE id = ?
`

func (q *Queries) GetBookByID(ctx context.Context, id uint64) (*Book, error) {
	row := q.db.QueryRowContext(ctx, GetBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.BookTitle,
		&i.BookIsbn,
		&i.BookCover,
		&i.BookAuthor,
		&i.BookPrice,
		&i.BookInventory,
		&i.EbookPrice,
		&i.PublishAt,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetBookList = `-- name: GetBookList :many
SELECT id, book_title, book_isbn, book_cover, book_author, book_price, book_inventory, ebook_price, publish_at, version, created_at, updated_at FROM books ORDER BY id DESC LIMIT ? OFFSET ?
`

type GetBookListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetBookList(ctx context.Context, arg GetBookListParams) ([]*Book, error) {
	rows, err := q.db.QueryContext(ctx, GetBookList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.BookTitle,
			&i.BookIsbn,
			&i.BookCover,
			&i.BookAuthor,
			&i.BookPrice,
			&i.BookInventory,
			&i.EbookPrice,
			&i.PublishAt,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetBooksByCategory = `-- name: GetBooksByCategory :many
SELECT b.id, b.book_title, b.book_isbn, b.book_cover, b.book_author, b.book_price, b.book_inventory, b.ebook_price, b.publish_at, b.version, b.created_at, b.updated_at FROM books b JOIN category_book cb ON b.id = cb.book_id WHERE cb.category_id=?
`

func (q *Queries) GetBooksByCategory(ctx context.Context, categoryID uint64) ([]*Book, error) {
	rows, err := q.db.QueryContext(ctx, GetBooksByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.BookTitle,
			&i.BookIsbn,
			&i.BookCover,
			&i.BookAuthor,
			&i.BookPrice,
			&i.BookInventory,
			&i.EbookPrice,
			&i.PublishAt,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateBook = `-- name: UpdateBook :exec
UPDATE books 
SET
    book_title=COALESCE(?, book_title),
    book_isbn=COALESCE(?, book_isbn),
    book_cover=COALESCE(?, book_cover),
    book_author=COALESCE(?, book_author),
    book_price=COALESCE(?, book_price),
    book_inventory=COALESCE(?, book_inventory),
    ebook_price=COALESCE(?, ebook_price),
    publish_at=COALESCE(?, publish_at),
    version=version+1
WHERE 
    id = ? AND version = ?
`

type UpdateBookParams struct {
	BookTitle     sql.NullString `json:"book_title"`
	BookIsbn      sql.NullString `json:"book_isbn"`
	BookCover     sql.NullString `json:"book_cover"`
	BookAuthor    sql.NullString `json:"book_author"`
	BookPrice     sql.NullInt32  `json:"book_price"`
	BookInventory sql.NullInt32  `json:"book_inventory"`
	EbookPrice    sql.NullInt32  `json:"ebook_price"`
	PublishAt     sql.NullTime   `json:"publish_at"`
	ID            uint64         `json:"id"`
	Version       int32          `json:"version"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, UpdateBook,
		arg.BookTitle,
		arg.BookIsbn,
		arg.BookCover,
		arg.BookAuthor,
		arg.BookPrice,
		arg.BookInventory,
		arg.EbookPrice,
		arg.PublishAt,
		arg.ID,
		arg.Version,
	)
	return err
}
